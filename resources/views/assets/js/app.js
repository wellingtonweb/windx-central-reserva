/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// require('./bootstrap');\n__webpack_require__(/*! ./lib/jquery.steps */ \"./resources/js/lib/jquery.steps.js\"); // $(\"#menu-toggle\").click(function (e) {\n//     e.preventDefault();\n//     $(\"#wrapper\").toggleClass(\"toggled\");\n// });\n\n\nfunction Expiration() {\n  var timer = setTimeout(function () {\n    Swal.fire({\n      title: 'Ops!',\n      text: 'Tempo expirado!',\n      icon: 'error',\n      timer: 10000,\n      timerProgressBar: true\n    });\n    window.location.href = 'http://localhost/central/public/index';\n  }, 11500);\n} // var str = 'MURO LARANJA, PORTÃO PRETO, PRÓXIMO A IGREJA ADVENTISTA ANTES DA IGREJA CATÓLICA.';\n//\n// alert(str.toTitleCase());\n\n\n$(document).ready(function () {\n  // String.prototype.toTitleCase = function() {\n  //     return this.charAt(0).toUpperCase() + this.slice(1);\n  // }\n  // alert( myString.trim().toLowerCase().replace(/\\w\\S*/g, (w) => (w.replace(/^\\w/, (c) => c.toUpperCase()))) );\n  $('#input-document').focus();\n  $('.btn-central').click(function () {\n    var number = $(this).text();\n\n    if (number == '') {\n      $('#input-document').val($('#input-document').val().substr(0, $('#input-document').val().length - 1)).focus();\n    } else {\n      $('#input-document').val($('#input-document').val() + number).focus();\n    }\n  });\n  $('.dropdown-toggle').dropdown();\n  $('.carousel').carousel({\n    interval: 5000,\n    touch: false\n  }); // $('.unlock').click(function (){\n  //\n  //     Swal.fire({\n  //         title: 'Liberação de Confiança',\n  //         text: 'Sua internet foi liberada até que conste o pagamento de sua mensalidade em nosso sistema! Reinicie seus equipamentos para reconectar.',\n  //         icon: 'success',\n  //         timer: 6000,\n  //         timerProgressBar: true,\n  //     })\n  //     // swalWithBootstrapButtons.fire({\n  //     //     title: 'Lberação de Confiança',\n  //     //     text: 'Sua internet foi liberada até que conste o pagamento de sua mensalidade em nosso sistema!',\n  //     //     icon: 'success',\n  //     //     showCancelButton: false,\n  //     //     confirmButtonText: 'OK',\n  //     //     reverseButtons: false\n  //     // })\n  // })\n  // $('.unlock').click(function ()\n  // {\n  //     alert('Seu cadastro foi desbloqueado!')\n  // })\n\n  $('.next-step').click(function () {\n    $('a[href$=\"next\"]').click(); //alert('Clicou!')\n  });\n  $('.owl-index').owlCarousel({\n    // animateOut: 'slideOutDown',\n    // animateIn: 'flipInX',\n    animateOut: 'fadeOut',\n    items: 1,\n    // margin:30,\n    // stagePadding:30,\n    // smartSpeed:450,\n    loop: true,\n    autoplay: true,\n    autoplayTimeout: 5000\n  });\n  $(document).ready(function () {\n    // $(\".owl-carousel2\").owlCarousel();\n    var owl = $('.owl-carousel').owlCarousel({\n      loop: false,\n      margin: 5,\n      dots: false,\n      nav: false,\n      responsiveClass: true,\n      stagePadding: 0,\n      responsive: {\n        0: {\n          items: 2,\n          margin: 10,\n          stagePadding: 20\n        },\n        600: {\n          items: 3,\n          margin: 10,\n          stagePadding: 50\n        },\n        1000: {\n          items: 4\n        }\n      }\n    }); // Go to the next item\n\n    $('.customNextBtn').click(function () {\n      owl.trigger('next.owl.carousel', [300]);\n    }); // Go to the next item\n\n    $('.customPrevBtn').click(function () {\n      owl.trigger('prev.owl.carousel', [300]);\n    });\n  });\n  $('.picpay').click(function () {\n    $('a[href$=\"next\"]').click();\n    $('.payment-form').html('PICPAY'); //Expiration();\n  });\n  $('.modality-debit').click(function () {\n    $('a[href$=\"next\"]').click();\n    $('.payment-form').html('DÉBITO'); //Expiration();\n  });\n  $('.modality-credit').click(function () {\n    $('a[href$=\"next\"]').click();\n    $('.payment-form').html('CRÉDITO'); //Expiration();\n  });\n  $('.finish-step').click(function () {\n    var modality = $('.payment-form').html();\n    var swalWithBootstrapButtons = Swal.mixin({\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger'\n      },\n      buttonsStyling: false\n    });\n\n    if (modality === 'PICPAY') {\n      Swal.fire({\n        title: 'Windx - Pagamento com PicPay',\n        imageUrl: 'images/picpay2.png',\n        imageWidth: 400,\n        imageHeight: 400,\n        // imageAlt: 'Windx - Pagamento com PicPay',\n        timer: 10000,\n        timerProgressBar: true\n      }).then(function (result) {\n        swalWithBootstrapButtons.fire({\n          title: 'Parabéns!',\n          text: 'Pagamento foi realizado com sucesso!',\n          icon: 'success',\n          showCancelButton: false,\n          confirmButtonText: 'OK',\n          reverseButtons: false,\n          timer: 5000,\n          timerProgressBar: false\n        }).then(function (result) {\n          // if (result.isConfirmed) {\n          swalWithBootstrapButtons.fire({\n            title: 'Windx - Pagamentos',\n            text: \"Deseja realizar outra ação?\",\n            icon: 'question',\n            showCancelButton: true,\n            confirmButtonText: 'Sim',\n            cancelButtonText: 'Não',\n            reverseButtons: true\n          }).then(function (result) {\n            if (result.isConfirmed) {\n              location.href = 'pagamento';\n            } else if (\n            /* Read more about handling dismissals below */\n            result.dismiss === Swal.DismissReason.cancel || result.isDismissed) {\n              // location.href='/';\n              location.href = 'http://localhost/central/public/';\n            }\n          }); // }\n        });\n      });\n    } else {\n      Swal.fire({\n        title: 'Windx - Pagamento com cartão',\n        text: 'Insira seu cartão de ' + modality + '!',\n        icon: 'info',\n        timer: 10000,\n        timerProgressBar: true\n      }).then(function (result) {\n        swalWithBootstrapButtons.fire({\n          title: 'Parabéns!',\n          text: 'Pagamento foi realizado com sucesso!',\n          icon: 'success',\n          showCancelButton: false,\n          confirmButtonText: 'OK',\n          reverseButtons: false,\n          timer: 3000,\n          timerProgressBar: false\n        }).then(function (result) {\n          // if (result.isConfirmed) {\n          swalWithBootstrapButtons.fire({\n            title: 'Windx - Pagamentos',\n            text: \"Deseja realizar outra ação?\",\n            icon: 'question',\n            showCancelButton: true,\n            confirmButtonText: 'Sim',\n            cancelButtonText: 'Não',\n            reverseButtons: true\n          }).then(function (result) {\n            if (result.isConfirmed) {\n              location.href = 'pagamento';\n            } else if (\n            /* Read more about handling dismissals below */\n            result.dismiss === Swal.DismissReason.cancel || result.isDismissed) {\n              // location.href='/';\n              location.href = 'http://localhost/central/public/';\n            }\n          }); // }\n        });\n      });\n    } // $('a[href$=\"finish\"]').click();\n    //\n    // const swalWithBootstrapButtons = Swal.mixin({\n    //     customClass: {\n    //         confirmButton: 'btn btn-success',\n    //         cancelButton: 'btn btn-danger'\n    //     },\n    //     buttonsStyling: false\n    // })\n    //\n    // swalWithBootstrapButtons.fire({\n    //     title: 'Parabéns!',\n    //     text: 'Seu pagamento foi realizado com sucesso!',\n    //     icon: 'success',\n    //     showCancelButton: false,\n    //     confirmButtonText: 'OK',\n    //     reverseButtons: false\n    // }).then((result) => {\n    //     if (result.isConfirmed) {\n    //         swalWithBootstrapButtons.fire({\n    //             title: 'Windx - Pagamentos',\n    //             text: \"Deseja realizar outra ação?\",\n    //             icon: 'question',\n    //             showCancelButton: true,\n    //             confirmButtonText: 'Sim',\n    //             cancelButtonText: 'Não',\n    //             reverseButtons: true\n    //         }).then((result) => {\n    //             if (result.isConfirmed) {\n    //                 location.href='pagamento';\n    //             } else if (\n    //                 /* Read more about handling dismissals below */\n    //                 result.dismiss === Swal.DismissReason.cancel\n    //             ) {\n    //                 // location.href='/';\n    //                 location.href='http://localhost/central/public/';\n    //             }\n    //         })\n    //     }\n    // })\n\n  });\n}); // document.oncontextmenu = document.body.oncontextmenu = function() {return false;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/js/lib/jquery.steps.js":
/*!******************************************!*\
  !*** ./resources/js/lib/jquery.steps.js ***!
  \******************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\r\n * jQuery Steps v1.1.0 - 09/04/2014\r\n * Copyright (c) 2014 Rafael Staib (http://www.jquery-steps.com)\r\n * Licensed under MIT http://www.opensource.org/licenses/MIT\r\n */\n;\n\n(function ($, undefined) {\n  $.fn.extend({\n    _aria: function _aria(name, value) {\n      return this.attr(\"aria-\" + name, value);\n    },\n    _removeAria: function _removeAria(name) {\n      return this.removeAttr(\"aria-\" + name);\n    },\n    _enableAria: function _enableAria(enable) {\n      return enable == null || enable ? this.removeClass(\"disabled\")._aria(\"disabled\", \"false\") : this.addClass(\"disabled\")._aria(\"disabled\", \"true\");\n    },\n    _showAria: function _showAria(show) {\n      return show == null || show ? this.show()._aria(\"hidden\", \"false\") : this.hide()._aria(\"hidden\", \"true\");\n    },\n    _selectAria: function _selectAria(select) {\n      return select == null || select ? this.addClass(\"current\")._aria(\"selected\", \"true\") : this.removeClass(\"current\")._aria(\"selected\", \"false\");\n    },\n    _id: function _id(id) {\n      return id ? this.attr(\"id\", id) : this.attr(\"id\");\n    }\n  });\n\n  if (!String.prototype.format) {\n    String.prototype.format = function () {\n      var args = arguments.length === 1 && $.isArray(arguments[0]) ? arguments[0] : arguments;\n      var formattedString = this;\n\n      for (var i = 0; i < args.length; i++) {\n        var pattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"gm\");\n        formattedString = formattedString.replace(pattern, args[i]);\n      }\n\n      return formattedString;\n    };\n  }\n  /**\r\n   * A global unique id count.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @property _uniqueId\r\n   * @type Integer\r\n   **/\n\n\n  var _uniqueId = 0;\n  /**\r\n   * The plugin prefix for cookies.\r\n   *\r\n   * @final\r\n   * @private\r\n   * @property _cookiePrefix\r\n   * @type String\r\n   **/\n\n  var _cookiePrefix = \"jQu3ry_5teps_St@te_\";\n  /**\r\n   * Suffix for the unique tab id.\r\n   *\r\n   * @final\r\n   * @private\r\n   * @property _tabSuffix\r\n   * @type String\r\n   * @since 0.9.7\r\n   **/\n\n  var _tabSuffix = \"-t-\";\n  /**\r\n   * Suffix for the unique tabpanel id.\r\n   *\r\n   * @final\r\n   * @private\r\n   * @property _tabpanelSuffix\r\n   * @type String\r\n   * @since 0.9.7\r\n   **/\n\n  var _tabpanelSuffix = \"-p-\";\n  /**\r\n   * Suffix for the unique title id.\r\n   *\r\n   * @final\r\n   * @private\r\n   * @property _titleSuffix\r\n   * @type String\r\n   * @since 0.9.7\r\n   **/\n\n  var _titleSuffix = \"-h-\";\n  /**\r\n   * An error message for an \"index out of range\" error.\r\n   *\r\n   * @final\r\n   * @private\r\n   * @property _indexOutOfRangeErrorMessage\r\n   * @type String\r\n   **/\n\n  var _indexOutOfRangeErrorMessage = \"Index out of range.\";\n  /**\r\n   * An error message for an \"missing corresponding element\" error.\r\n   *\r\n   * @final\r\n   * @private\r\n   * @property _missingCorrespondingElementErrorMessage\r\n   * @type String\r\n   **/\n\n  var _missingCorrespondingElementErrorMessage = \"One or more corresponding step {0} are missing.\";\n  /**\r\n   * Adds a step to the cache.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method addStepToCache\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param step {Object} The step object to add\r\n   **/\n\n  function addStepToCache(wizard, step) {\n    getSteps(wizard).push(step);\n  }\n\n  function analyzeData(wizard, options, state) {\n    var stepTitles = wizard.children(options.headerTag),\n        stepContents = wizard.children(options.bodyTag); // Validate content\n\n    if (stepTitles.length > stepContents.length) {\n      throwError(_missingCorrespondingElementErrorMessage, \"contents\");\n    } else if (stepTitles.length < stepContents.length) {\n      throwError(_missingCorrespondingElementErrorMessage, \"titles\");\n    }\n\n    var startIndex = options.startIndex;\n    state.stepCount = stepTitles.length; // Tries to load the saved state (step position)\n\n    if (options.saveState && $.cookie) {\n      var savedState = $.cookie(_cookiePrefix + getUniqueId(wizard)); // Sets the saved position to the start index if not undefined or out of range\n\n      var savedIndex = parseInt(savedState, 0);\n\n      if (!isNaN(savedIndex) && savedIndex < state.stepCount) {\n        startIndex = savedIndex;\n      }\n    }\n\n    state.currentIndex = startIndex;\n    stepTitles.each(function (index) {\n      var item = $(this),\n          // item == header\n      content = stepContents.eq(index),\n          modeData = content.data(\"mode\"),\n          mode = modeData == null ? contentMode.html : getValidEnumValue(contentMode, /^\\s*$/.test(modeData) || isNaN(modeData) ? modeData : parseInt(modeData, 0)),\n          contentUrl = mode === contentMode.html || content.data(\"url\") === undefined ? \"\" : content.data(\"url\"),\n          contentLoaded = mode !== contentMode.html && content.data(\"loaded\") === \"1\",\n          step = $.extend({}, stepModel, {\n        title: item.html(),\n        content: mode === contentMode.html ? content.html() : \"\",\n        contentUrl: contentUrl,\n        contentMode: mode,\n        contentLoaded: contentLoaded\n      });\n      addStepToCache(wizard, step);\n    });\n  }\n  /**\r\n   * Triggers the onCanceled event.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method cancel\r\n   * @param wizard {Object} The jQuery wizard object\r\n   **/\n\n\n  function cancel(wizard) {\n    wizard.triggerHandler(\"canceled\");\n  }\n\n  function decreaseCurrentIndexBy(state, decreaseBy) {\n    return state.currentIndex - decreaseBy;\n  }\n  /**\r\n   * Removes the control functionality completely and transforms the current state to the initial HTML structure.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method destroy\r\n   * @param wizard {Object} A jQuery wizard object\r\n   **/\n\n\n  function destroy(wizard, options) {\n    var eventNamespace = getEventNamespace(wizard); // Remove virtual data objects from the wizard\n\n    wizard.unbind(eventNamespace).removeData(\"uid\").removeData(\"options\").removeData(\"state\").removeData(\"steps\").removeData(\"eventNamespace\").find(\".actions a\").unbind(eventNamespace); // Remove attributes and CSS classes from the wizard\n\n    wizard.removeClass(options.clearFixCssClass + \" vertical\");\n    var contents = wizard.find(\".content > *\"); // Remove virtual data objects from panels and their titles\n\n    contents.removeData(\"loaded\").removeData(\"mode\").removeData(\"url\"); // Remove attributes, CSS classes and reset inline styles on all panels and their titles\n\n    contents.removeAttr(\"id\").removeAttr(\"role\").removeAttr(\"tabindex\").removeAttr(\"class\").removeAttr(\"style\")._removeAria(\"labelledby\")._removeAria(\"hidden\"); // Empty panels if the mode is set to 'async' or 'iframe'\n\n\n    wizard.find(\".content > [data-mode='async'],.content > [data-mode='iframe']\").empty();\n    var wizardSubstitute = $(\"<{0} class=\\\"{1}\\\"></{0}>\".format(wizard.get(0).tagName, wizard.attr(\"class\")));\n\n    var wizardId = wizard._id();\n\n    if (wizardId != null && wizardId !== \"\") {\n      wizardSubstitute._id(wizardId);\n    }\n\n    wizardSubstitute.html(wizard.find(\".content\").html());\n    wizard.after(wizardSubstitute);\n    wizard.remove();\n    return wizardSubstitute;\n  }\n  /**\r\n   * Triggers the onFinishing and onFinished event.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method finishStep\r\n   * @param wizard {Object} The jQuery wizard object\r\n   * @param state {Object} The state container of the current wizard\r\n   **/\n\n\n  function finishStep(wizard, state) {\n    var currentStep = wizard.find(\".steps li\").eq(state.currentIndex);\n\n    if (wizard.triggerHandler(\"finishing\", [state.currentIndex])) {\n      currentStep.addClass(\"done\").removeClass(\"error\");\n      wizard.triggerHandler(\"finished\", [state.currentIndex]);\n    } else {\n      currentStep.addClass(\"error\");\n    }\n  }\n  /**\r\n   * Gets or creates if not exist an unique event namespace for the given wizard instance.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method getEventNamespace\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @return {String} Returns the unique event namespace for the given wizard\r\n   */\n\n\n  function getEventNamespace(wizard) {\n    var eventNamespace = wizard.data(\"eventNamespace\");\n\n    if (eventNamespace == null) {\n      eventNamespace = \".\" + getUniqueId(wizard);\n      wizard.data(\"eventNamespace\", eventNamespace);\n    }\n\n    return eventNamespace;\n  }\n\n  function getStepAnchor(wizard, index) {\n    var uniqueId = getUniqueId(wizard);\n    return wizard.find(\"#\" + uniqueId + _tabSuffix + index);\n  }\n\n  function getStepPanel(wizard, index) {\n    var uniqueId = getUniqueId(wizard);\n    return wizard.find(\"#\" + uniqueId + _tabpanelSuffix + index);\n  }\n\n  function getStepTitle(wizard, index) {\n    var uniqueId = getUniqueId(wizard);\n    return wizard.find(\"#\" + uniqueId + _titleSuffix + index);\n  }\n\n  function getOptions(wizard) {\n    return wizard.data(\"options\");\n  }\n\n  function getState(wizard) {\n    return wizard.data(\"state\");\n  }\n\n  function getSteps(wizard) {\n    return wizard.data(\"steps\");\n  }\n  /**\r\n   * Gets a specific step object by index.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method getStep\r\n   * @param index {Integer} An integer that belongs to the position of a step\r\n   * @return {Object} A specific step object\r\n   **/\n\n\n  function getStep(wizard, index) {\n    var steps = getSteps(wizard);\n\n    if (index < 0 || index >= steps.length) {\n      throwError(_indexOutOfRangeErrorMessage);\n    }\n\n    return steps[index];\n  }\n  /**\r\n   * Gets or creates if not exist an unique id from the given wizard instance.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method getUniqueId\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @return {String} Returns the unique id for the given wizard\r\n   */\n\n\n  function getUniqueId(wizard) {\n    var uniqueId = wizard.data(\"uid\");\n\n    if (uniqueId == null) {\n      uniqueId = wizard._id();\n\n      if (uniqueId == null) {\n        uniqueId = \"steps-uid-\".concat(_uniqueId);\n\n        wizard._id(uniqueId);\n      }\n\n      _uniqueId++;\n      wizard.data(\"uid\", uniqueId);\n    }\n\n    return uniqueId;\n  }\n  /**\r\n   * Gets a valid enum value by checking a specific enum key or value.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method getValidEnumValue\r\n   * @param enumType {Object} Type of enum\r\n   * @param keyOrValue {Object} Key as `String` or value as `Integer` to check for\r\n   */\n\n\n  function getValidEnumValue(enumType, keyOrValue) {\n    validateArgument(\"enumType\", enumType);\n    validateArgument(\"keyOrValue\", keyOrValue); // Is key\n\n    if (typeof keyOrValue === \"string\") {\n      var value = enumType[keyOrValue];\n\n      if (value === undefined) {\n        throwError(\"The enum key '{0}' does not exist.\", keyOrValue);\n      }\n\n      return value;\n    } // Is value\n    else if (typeof keyOrValue === \"number\") {\n      for (var key in enumType) {\n        if (enumType[key] === keyOrValue) {\n          return keyOrValue;\n        }\n      }\n\n      throwError(\"Invalid enum value '{0}'.\", keyOrValue);\n    } // Type is not supported\n    else {\n      throwError(\"Invalid key or value type.\");\n    }\n  }\n  /**\r\n   * Routes to the next step.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method goTonextStep\r\n   * @param wizard {Object} The jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   * @return {Boolean} Indicates whether the action executed\r\n   **/\n\n\n  function goTonextStep(wizard, options, state) {\n    return paginationClick(wizard, options, state, increaseCurrentIndexBy(state, 1));\n  }\n  /**\r\n   * Routes to the previous step.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method goToPreviousStep\r\n   * @param wizard {Object} The jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   * @return {Boolean} Indicates whether the action executed\r\n   **/\n\n\n  function goToPreviousStep(wizard, options, state) {\n    return paginationClick(wizard, options, state, decreaseCurrentIndexBy(state, 1));\n  }\n  /**\r\n   * Routes to a specific step by a given index.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method goToStep\r\n   * @param wizard {Object} The jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   * @param index {Integer} The position (zero-based) to route to\r\n   * @return {Boolean} Indicates whether the action succeeded or failed\r\n   **/\n\n\n  function goToStep(wizard, options, state, index) {\n    if (index < 0 || index >= state.stepCount) {\n      throwError(_indexOutOfRangeErrorMessage);\n    }\n\n    if (options.forceMoveForward && index < state.currentIndex) {\n      return;\n    }\n\n    var oldIndex = state.currentIndex;\n\n    if (wizard.triggerHandler(\"stepChanging\", [state.currentIndex, index])) {\n      // Save new state\n      state.currentIndex = index;\n      saveCurrentStateToCookie(wizard, options, state); // Change visualisation\n\n      refreshStepNavigation(wizard, options, state, oldIndex);\n      refreshPagination(wizard, options, state);\n      loadAsyncContent(wizard, options, state);\n      startTransitionEffect(wizard, options, state, index, oldIndex, function () {\n        wizard.triggerHandler(\"stepChanged\", [index, oldIndex]);\n      });\n    } else {\n      wizard.find(\".steps li\").eq(oldIndex).addClass(\"error\");\n    }\n\n    return true;\n  }\n\n  function increaseCurrentIndexBy(state, increaseBy) {\n    return state.currentIndex + increaseBy;\n  }\n  /**\r\n   * Initializes the component.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method initialize\r\n   * @param options {Object} The component settings\r\n   **/\n\n\n  function initialize(options) {\n    /*jshint -W040 */\n    var opts = $.extend(true, {}, defaults, options);\n    return this.each(function () {\n      var wizard = $(this);\n      var state = {\n        currentIndex: opts.startIndex,\n        currentStep: null,\n        stepCount: 0,\n        transitionElement: null\n      }; // Create data container\n\n      wizard.data(\"options\", opts);\n      wizard.data(\"state\", state);\n      wizard.data(\"steps\", []);\n      analyzeData(wizard, opts, state);\n      render(wizard, opts, state);\n      registerEvents(wizard, opts); // Trigger focus\n\n      if (opts.autoFocus && _uniqueId === 0) {\n        getStepAnchor(wizard, opts.startIndex).focus();\n      }\n\n      wizard.triggerHandler(\"init\", [opts.startIndex]);\n    });\n  }\n  /**\r\n   * Inserts a new step to a specific position.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method insertStep\r\n   * @param wizard {Object} The jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   * @param index {Integer} The position (zero-based) to add\r\n   * @param step {Object} The step object to add\r\n   * @example\r\n   *     $(\"#wizard\").steps().insert(0, {\r\n   *         title: \"Title\",\r\n   *         content: \"\", // optional\r\n   *         contentMode: \"async\", // optional\r\n   *         contentUrl: \"/Content/Step/1\" // optional\r\n   *     });\r\n   * @chainable\r\n   **/\n\n\n  function insertStep(wizard, options, state, index, step) {\n    if (index < 0 || index > state.stepCount) {\n      throwError(_indexOutOfRangeErrorMessage);\n    } // TODO: Validate step object\n    // Change data\n\n\n    step = $.extend({}, stepModel, step);\n    insertStepToCache(wizard, index, step);\n\n    if (state.currentIndex !== state.stepCount && state.currentIndex >= index) {\n      state.currentIndex++;\n      saveCurrentStateToCookie(wizard, options, state);\n    }\n\n    state.stepCount++;\n    var contentContainer = wizard.find(\".content\"),\n        header = $(\"<{0}>{1}</{0}>\".format(options.headerTag, step.title)),\n        body = $(\"<{0}></{0}>\".format(options.bodyTag));\n\n    if (step.contentMode == null || step.contentMode === contentMode.html) {\n      body.html(step.content);\n    }\n\n    if (index === 0) {\n      contentContainer.prepend(body).prepend(header);\n    } else {\n      getStepPanel(wizard, index - 1).after(body).after(header);\n    }\n\n    renderBody(wizard, state, body, index);\n    renderTitle(wizard, options, state, header, index);\n    refreshSteps(wizard, options, state, index);\n\n    if (index === state.currentIndex) {\n      refreshStepNavigation(wizard, options, state);\n    }\n\n    refreshPagination(wizard, options, state);\n    return wizard;\n  }\n  /**\r\n   * Inserts a step object to the cache at a specific position.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method insertStepToCache\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param index {Integer} The position (zero-based) to add\r\n   * @param step {Object} The step object to add\r\n   **/\n\n\n  function insertStepToCache(wizard, index, step) {\n    getSteps(wizard).splice(index, 0, step);\n  }\n  /**\r\n   * Handles the keyup DOM event for pagination.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @event keyup\r\n   * @param event {Object} An event object\r\n   */\n\n\n  function keyUpHandler(event) {\n    var wizard = $(this),\n        options = getOptions(wizard),\n        state = getState(wizard);\n\n    if (options.suppressPaginationOnFocus && wizard.find(\":focus\").is(\":input\")) {\n      event.preventDefault();\n      return false;\n    }\n\n    var keyCodes = {\n      left: 37,\n      right: 39\n    };\n\n    if (event.keyCode === keyCodes.left) {\n      event.preventDefault();\n      goToPreviousStep(wizard, options, state);\n    } else if (event.keyCode === keyCodes.right) {\n      event.preventDefault();\n      goTonextStep(wizard, options, state);\n    }\n  }\n  /**\r\n   * Loads and includes async content.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method loadAsyncContent\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   */\n\n\n  function loadAsyncContent(wizard, options, state) {\n    if (state.stepCount > 0) {\n      var currentIndex = state.currentIndex,\n          currentStep = getStep(wizard, currentIndex);\n\n      if (!options.enableContentCache || !currentStep.contentLoaded) {\n        switch (getValidEnumValue(contentMode, currentStep.contentMode)) {\n          case contentMode.iframe:\n            wizard.find(\".content > .body\").eq(state.currentIndex).empty().html(\"<iframe src=\\\"\" + currentStep.contentUrl + \"\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" />\").data(\"loaded\", \"1\");\n            break;\n\n          case contentMode.async:\n            var currentStepContent = getStepPanel(wizard, currentIndex)._aria(\"busy\", \"true\").empty().append(renderTemplate(options.loadingTemplate, {\n              text: options.labels.loading\n            }));\n\n            $.ajax({\n              url: currentStep.contentUrl,\n              cache: false\n            }).done(function (data) {\n              currentStepContent.empty().html(data)._aria(\"busy\", \"false\").data(\"loaded\", \"1\");\n\n              wizard.triggerHandler(\"contentLoaded\", [currentIndex]);\n            });\n            break;\n        }\n      }\n    }\n  }\n  /**\r\n   * Fires the action next or previous click event.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method paginationClick\r\n   * @param wizard {Object} The jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   * @param index {Integer} The position (zero-based) to route to\r\n   * @return {Boolean} Indicates whether the event fired successfully or not\r\n   **/\n\n\n  function paginationClick(wizard, options, state, index) {\n    var oldIndex = state.currentIndex;\n\n    if (index >= 0 && index < state.stepCount && !(options.forceMoveForward && index < state.currentIndex)) {\n      var anchor = getStepAnchor(wizard, index),\n          parent = anchor.parent(),\n          isDisabled = parent.hasClass(\"disabled\"); // Enable the step to make the anchor clickable!\n\n      parent._enableAria();\n\n      anchor.click(); // An error occured\n\n      if (oldIndex === state.currentIndex && isDisabled) {\n        // Disable the step again if current index has not changed; prevents click action.\n        parent._enableAria(false);\n\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n   * Fires when a pagination click happens.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @event click\r\n   * @param event {Object} An event object\r\n   */\n\n\n  function paginationClickHandler(event) {\n    event.preventDefault(); // var anchor = $('.avancar'),\n\n    var anchor = $(this),\n        wizard = anchor.parent().parent().parent().parent(),\n        options = getOptions(wizard),\n        state = getState(wizard),\n        href = anchor.attr(\"href\");\n\n    switch (href.substring(href.lastIndexOf(\"#\") + 1)) {\n      case \"cancel\":\n        cancel(wizard);\n        break;\n\n      case \"finish\":\n        finishStep(wizard, state);\n        break;\n\n      case \"next\":\n        goTonextStep(wizard, options, state);\n        break;\n\n      case \"previous\":\n        goToPreviousStep(wizard, options, state);\n        break;\n    }\n  }\n  /**\r\n   * Refreshs the visualization state for the entire pagination.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method refreshPagination\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   */\n\n\n  function refreshPagination(wizard, options, state) {\n    if (options.enablePagination) {\n      var finish = wizard.find(\".actions a[href$='#finish']\").parent(),\n          next = wizard.find(\".actions a[href$='#next']\").parent();\n\n      if (!options.forceMoveForward) {\n        var previous = wizard.find(\".actions a[href$='#previous']\").parent();\n\n        previous._enableAria(state.currentIndex > 0);\n      }\n\n      if (options.enableFinishButton && options.showFinishButtonAlways) {\n        finish._enableAria(state.stepCount > 0);\n\n        next._enableAria(state.stepCount > 1 && state.stepCount > state.currentIndex + 1);\n      } else {\n        finish._showAria(options.enableFinishButton && state.stepCount === state.currentIndex + 1);\n\n        next._showAria(state.stepCount === 0 || state.stepCount > state.currentIndex + 1)._enableAria(state.stepCount > state.currentIndex + 1 || !options.enableFinishButton);\n      }\n    }\n  }\n  /**\r\n   * Refreshs the visualization state for the step navigation (tabs).\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method refreshStepNavigation\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   * @param [oldIndex] {Integer} The index of the prior step\r\n   */\n\n\n  function refreshStepNavigation(wizard, options, state, oldIndex) {\n    var currentOrNewStepAnchor = getStepAnchor(wizard, state.currentIndex),\n        currentInfo = $(\"<span class=\\\"current-info audible\\\">\" + options.labels.current + \" </span>\"),\n        stepTitles = wizard.find(\".content > .title\");\n\n    if (oldIndex != null) {\n      var oldStepAnchor = getStepAnchor(wizard, oldIndex);\n\n      oldStepAnchor.parent().addClass(\"done\").removeClass(\"error\")._selectAria(false);\n\n      stepTitles.eq(oldIndex).removeClass(\"current\").next(\".body\").removeClass(\"current\");\n      currentInfo = oldStepAnchor.find(\".current-info\");\n      currentOrNewStepAnchor.focus();\n    }\n\n    currentOrNewStepAnchor.prepend(currentInfo).parent()._selectAria().removeClass(\"done\")._enableAria();\n\n    stepTitles.eq(state.currentIndex).addClass(\"current\").next(\".body\").addClass(\"current\");\n  }\n  /**\r\n   * Refreshes step buttons and their related titles beyond a certain position.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method refreshSteps\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   * @param index {Integer} The start point for refreshing ids\r\n   */\n\n\n  function refreshSteps(wizard, options, state, index) {\n    var uniqueId = getUniqueId(wizard);\n\n    for (var i = index; i < state.stepCount; i++) {\n      var uniqueStepId = uniqueId + _tabSuffix + i,\n          uniqueBodyId = uniqueId + _tabpanelSuffix + i,\n          uniqueHeaderId = uniqueId + _titleSuffix + i,\n          title = wizard.find(\".title\").eq(i)._id(uniqueHeaderId);\n\n      wizard.find(\".steps a\").eq(i)._id(uniqueStepId)._aria(\"controls\", uniqueBodyId).attr(\"href\", \"#\" + uniqueHeaderId).html(renderTemplate(options.titleTemplate, {\n        index: i + 1,\n        title: title.html()\n      }));\n\n      wizard.find(\".body\").eq(i)._id(uniqueBodyId)._aria(\"labelledby\", uniqueHeaderId);\n    }\n  }\n\n  function registerEvents(wizard, options) {\n    var eventNamespace = getEventNamespace(wizard);\n    wizard.bind(\"canceled\" + eventNamespace, options.onCanceled);\n    wizard.bind(\"contentLoaded\" + eventNamespace, options.onContentLoaded);\n    wizard.bind(\"finishing\" + eventNamespace, options.onFinishing);\n    wizard.bind(\"finished\" + eventNamespace, options.onFinished);\n    wizard.bind(\"init\" + eventNamespace, options.onInit);\n    wizard.bind(\"stepChanging\" + eventNamespace, options.onStepChanging);\n    wizard.bind(\"stepChanged\" + eventNamespace, options.onStepChanged);\n\n    if (options.enableKeyNavigation) {\n      wizard.bind(\"keyup\" + eventNamespace, keyUpHandler);\n    }\n\n    wizard.find(\".actions a\").bind(\"click\" + eventNamespace, paginationClickHandler);\n  }\n  /**\r\n   * Removes a specific step by an given index.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method removeStep\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   * @param index {Integer} The position (zero-based) of the step to remove\r\n   * @return Indecates whether the item is removed.\r\n   **/\n\n\n  function removeStep(wizard, options, state, index) {\n    // Index out of range and try deleting current item will return false.\n    if (index < 0 || index >= state.stepCount || state.currentIndex === index) {\n      return false;\n    } // Change data\n\n\n    removeStepFromCache(wizard, index);\n\n    if (state.currentIndex > index) {\n      state.currentIndex--;\n      saveCurrentStateToCookie(wizard, options, state);\n    }\n\n    state.stepCount--;\n    getStepTitle(wizard, index).remove();\n    getStepPanel(wizard, index).remove();\n    getStepAnchor(wizard, index).parent().remove(); // Set the \"first\" class to the new first step button\n\n    if (index === 0) {\n      wizard.find(\".steps li\").first().addClass(\"first\");\n    } // Set the \"last\" class to the new last step button\n\n\n    if (index === state.stepCount) {\n      wizard.find(\".steps li\").eq(index).addClass(\"last\");\n    }\n\n    refreshSteps(wizard, options, state, index);\n    refreshPagination(wizard, options, state);\n    return true;\n  }\n\n  function removeStepFromCache(wizard, index) {\n    getSteps(wizard).splice(index, 1);\n  }\n  /**\r\n   * Transforms the base html structure to a more sensible html structure.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method render\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   **/\n\n\n  function render(wizard, options, state) {\n    // Create a content wrapper and copy HTML from the intial wizard structure\n    var wrapperTemplate = \"<{0} class=\\\"{1}\\\">{2}</{0}>\",\n        orientation = getValidEnumValue(stepsOrientation, options.stepsOrientation),\n        verticalCssClass = orientation === stepsOrientation.vertical ? \" vertical\" : \"\",\n        contentWrapper = $(wrapperTemplate.format(options.contentContainerTag, \"content \" + options.clearFixCssClass, wizard.html())),\n        stepsWrapper = $(wrapperTemplate.format(options.stepsContainerTag, \"steps \" + options.clearFixCssClass, \"<ul role=\\\"tablist\\\"></ul>\")),\n        stepTitles = contentWrapper.children(options.headerTag),\n        stepContents = contentWrapper.children(options.bodyTag); // Transform the wizard wrapper and remove the inner HTML\n\n    wizard.attr(\"role\", \"application\").empty().append(stepsWrapper).append(contentWrapper).addClass(options.cssClass + \" \" + options.clearFixCssClass + verticalCssClass); // Add WIA-ARIA support\n\n    stepContents.each(function (index) {\n      renderBody(wizard, state, $(this), index);\n    });\n    stepTitles.each(function (index) {\n      renderTitle(wizard, options, state, $(this), index);\n    });\n    refreshStepNavigation(wizard, options, state);\n    renderPagination(wizard, options, state);\n  }\n  /**\r\n   * Transforms the body to a proper tabpanel.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method renderBody\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param body {Object} A jQuery body object\r\n   * @param index {Integer} The position of the body\r\n   */\n\n\n  function renderBody(wizard, state, body, index) {\n    var uniqueId = getUniqueId(wizard),\n        uniqueBodyId = uniqueId + _tabpanelSuffix + index,\n        uniqueHeaderId = uniqueId + _titleSuffix + index;\n\n    body._id(uniqueBodyId).attr(\"role\", \"tabpanel\")._aria(\"labelledby\", uniqueHeaderId).addClass(\"body\")._showAria(state.currentIndex === index);\n  }\n  /**\r\n   * Renders a pagination if enabled.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method renderPagination\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   */\n\n\n  function renderPagination(wizard, options, state) {\n    if (options.enablePagination) {\n      var pagination = \"<{0} class=\\\"actions {1}\\\"><ul role=\\\"menu\\\" aria-label=\\\"{2}\\\">{3}</ul></{0}>\",\n          buttonTemplate = \"<li><a href=\\\"#{0}\\\" role=\\\"menuitem\\\">{1}</a></li>\",\n          buttons = \"\";\n\n      if (!options.forceMoveForward) {\n        buttons += buttonTemplate.format(\"previous\", options.labels.previous);\n      }\n\n      buttons += buttonTemplate.format(\"next\", options.labels.next);\n\n      if (options.enableFinishButton) {\n        buttons += buttonTemplate.format(\"finish\", options.labels.finish);\n      }\n\n      if (options.enableCancelButton) {\n        buttons += buttonTemplate.format(\"cancel\", options.labels.cancel);\n      }\n\n      wizard.append(pagination.format(options.actionContainerTag, options.clearFixCssClass, options.labels.pagination, buttons));\n      refreshPagination(wizard, options, state);\n      loadAsyncContent(wizard, options, state);\n    }\n  }\n  /**\r\n   * Renders a template and replaces all placeholder.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method renderTemplate\r\n   * @param template {String} A template\r\n   * @param substitutes {Object} A list of substitute\r\n   * @return {String} The rendered template\r\n   */\n\n\n  function renderTemplate(template, substitutes) {\n    var matches = template.match(/#([a-z]*)#/gi);\n\n    for (var i = 0; i < matches.length; i++) {\n      var match = matches[i],\n          key = match.substring(1, match.length - 1);\n\n      if (substitutes[key] === undefined) {\n        throwError(\"The key '{0}' does not exist in the substitute collection!\", key);\n      }\n\n      template = template.replace(match, substitutes[key]);\n    }\n\n    return template;\n  }\n  /**\r\n   * Transforms the title to a step item button.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method renderTitle\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   * @param header {Object} A jQuery header object\r\n   * @param index {Integer} The position of the header\r\n   */\n\n\n  function renderTitle(wizard, options, state, header, index) {\n    var uniqueId = getUniqueId(wizard),\n        uniqueStepId = uniqueId + _tabSuffix + index,\n        uniqueBodyId = uniqueId + _tabpanelSuffix + index,\n        uniqueHeaderId = uniqueId + _titleSuffix + index,\n        stepCollection = wizard.find(\".steps > ul\"),\n        title = renderTemplate(options.titleTemplate, {\n      index: index + 1,\n      title: header.html()\n    }),\n        stepItem = $(\"<li role=\\\"tab\\\"><a id=\\\"\" + uniqueStepId + \"\\\" href=\\\"#\" + uniqueHeaderId + \"\\\" aria-controls=\\\"\" + uniqueBodyId + \"\\\">\" + title + \"</a></li>\");\n\n    stepItem._enableAria(options.enableAllSteps || state.currentIndex > index);\n\n    if (state.currentIndex > index) {\n      stepItem.addClass(\"done\");\n    }\n\n    header._id(uniqueHeaderId).attr(\"tabindex\", \"-1\").addClass(\"title\");\n\n    if (index === 0) {\n      stepCollection.prepend(stepItem);\n    } else {\n      stepCollection.find(\"li\").eq(index - 1).after(stepItem);\n    } // Set the \"first\" class to the new first step button\n\n\n    if (index === 0) {\n      stepCollection.find(\"li\").removeClass(\"first\").eq(index).addClass(\"first\");\n    } // Set the \"last\" class to the new last step button\n\n\n    if (index === state.stepCount - 1) {\n      stepCollection.find(\"li\").removeClass(\"last\").eq(index).addClass(\"last\");\n    } // Register click event\n\n\n    stepItem.children(\"a\").bind(\"click\" + getEventNamespace(wizard), stepClickHandler);\n  }\n  /**\r\n   * Saves the current state to a cookie.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method saveCurrentStateToCookie\r\n   * @param wizard {Object} A jQuery wizard object\r\n   * @param options {Object} Settings of the current wizard\r\n   * @param state {Object} The state container of the current wizard\r\n   */\n\n\n  function saveCurrentStateToCookie(wizard, options, state) {\n    if (options.saveState && $.cookie) {\n      $.cookie(_cookiePrefix + getUniqueId(wizard), state.currentIndex);\n    }\n  }\n\n  function startTransitionEffect(wizard, options, state, index, oldIndex, doneCallback) {\n    var stepContents = wizard.find(\".content > .body\"),\n        effect = getValidEnumValue(transitionEffect, options.transitionEffect),\n        effectSpeed = options.transitionEffectSpeed,\n        newStep = stepContents.eq(index),\n        currentStep = stepContents.eq(oldIndex);\n\n    switch (effect) {\n      case transitionEffect.fade:\n      case transitionEffect.slide:\n        var hide = effect === transitionEffect.fade ? \"fadeOut\" : \"slideUp\",\n            show = effect === transitionEffect.fade ? \"fadeIn\" : \"slideDown\";\n        state.transitionElement = newStep;\n        currentStep[hide](effectSpeed, function () {\n          var wizard = $(this)._showAria(false).parent().parent(),\n              state = getState(wizard);\n\n          if (state.transitionElement) {\n            state.transitionElement[show](effectSpeed, function () {\n              $(this)._showAria();\n            }).promise().done(doneCallback);\n            state.transitionElement = null;\n          }\n        });\n        break;\n\n      case transitionEffect.slideLeft:\n        var outerWidth = currentStep.outerWidth(true),\n            posFadeOut = index > oldIndex ? -outerWidth : outerWidth,\n            posFadeIn = index > oldIndex ? outerWidth : -outerWidth;\n        $.when(currentStep.animate({\n          left: posFadeOut\n        }, effectSpeed, function () {\n          $(this)._showAria(false);\n        }), newStep.css_old(\"left\", posFadeIn + \"px\")._showAria().animate({\n          left: 0\n        }, effectSpeed)).done(doneCallback);\n        break;\n\n      default:\n        $.when(currentStep._showAria(false), newStep._showAria()).done(doneCallback);\n        break;\n    }\n  }\n  /**\r\n   * Fires when a step click happens.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @event click\r\n   * @param event {Object} An event object\r\n   */\n\n\n  function stepClickHandler(event) {\n    event.preventDefault();\n    var anchor = $(this),\n        wizard = anchor.parent().parent().parent().parent(),\n        options = getOptions(wizard),\n        state = getState(wizard),\n        oldIndex = state.currentIndex;\n\n    if (anchor.parent().is(\":not(.disabled):not(.current)\")) {\n      var href = anchor.attr(\"href\"),\n          position = parseInt(href.substring(href.lastIndexOf(\"-\") + 1), 0);\n      goToStep(wizard, options, state, position);\n    } // If nothing has changed\n\n\n    if (oldIndex === state.currentIndex) {\n      getStepAnchor(wizard, oldIndex).focus();\n      return false;\n    }\n  }\n\n  function throwError(message) {\n    if (arguments.length > 1) {\n      message = message.format(Array.prototype.slice.call(arguments, 1));\n    }\n\n    throw new Error(message);\n  }\n  /**\r\n   * Checks an argument for null or undefined and throws an error if one check applies.\r\n   *\r\n   * @static\r\n   * @private\r\n   * @method validateArgument\r\n   * @param argumentName {String} The name of the given argument\r\n   * @param argumentValue {Object} The argument itself\r\n   */\n\n\n  function validateArgument(argumentName, argumentValue) {\n    if (argumentValue == null) {\n      throwError(\"The argument '{0}' is null or undefined.\", argumentName);\n    }\n  }\n  /**\r\n   * Represents a jQuery wizard plugin.\r\n   *\r\n   * @class steps\r\n   * @constructor\r\n   * @param [method={}] The name of the method as `String` or an JSON object for initialization\r\n   * @param [params=]* {Array} Additional arguments for a method call\r\n   * @chainable\r\n   **/\n\n\n  $.fn.steps = function (method) {\n    if ($.fn.steps[method]) {\n      return $.fn.steps[method].apply(this, Array.prototype.slice.call(arguments, 1));\n    } else if (_typeof(method) === \"object\" || !method) {\n      return initialize.apply(this, arguments);\n    } else {\n      $.error(\"Method \" + method + \" does not exist on jQuery.steps\");\n    }\n  };\n  /**\r\n   * Adds a new step.\r\n   *\r\n   * @method add\r\n   * @param step {Object} The step object to add\r\n   * @chainable\r\n   **/\n\n\n  $.fn.steps.add = function (step) {\n    var state = getState(this);\n    return insertStep(this, getOptions(this), state, state.stepCount, step);\n  };\n  /**\r\n   * Removes the control functionality completely and transforms the current state to the initial HTML structure.\r\n   *\r\n   * @method destroy\r\n   * @chainable\r\n   **/\n\n\n  $.fn.steps.destroy = function () {\n    return destroy(this, getOptions(this));\n  };\n  /**\r\n   * Triggers the onFinishing and onFinished event.\r\n   *\r\n   * @method finish\r\n   **/\n\n\n  $.fn.steps.finish = function () {\n    finishStep(this, getState(this));\n  };\n  /**\r\n   * Gets the current step index.\r\n   *\r\n   * @method getCurrentIndex\r\n   * @return {Integer} The actual step index (zero-based)\r\n   * @for steps\r\n   **/\n\n\n  $.fn.steps.getCurrentIndex = function () {\n    return getState(this).currentIndex;\n  };\n  /**\r\n   * Gets the current step object.\r\n   *\r\n   * @method getCurrentStep\r\n   * @return {Object} The actual step object\r\n   **/\n\n\n  $.fn.steps.getCurrentStep = function () {\n    return getStep(this, getState(this).currentIndex);\n  };\n  /**\r\n   * Gets a specific step object by index.\r\n   *\r\n   * @method getStep\r\n   * @param index {Integer} An integer that belongs to the position of a step\r\n   * @return {Object} A specific step object\r\n   **/\n\n\n  $.fn.steps.getStep = function (index) {\n    return getStep(this, index);\n  };\n  /**\r\n   * Inserts a new step to a specific position.\r\n   *\r\n   * @method insert\r\n   * @param index {Integer} The position (zero-based) to add\r\n   * @param step {Object} The step object to add\r\n   * @example\r\n   *     $(\"#wizard\").steps().insert(0, {\r\n   *         title: \"Title\",\r\n   *         content: \"\", // optional\r\n   *         contentMode: \"async\", // optional\r\n   *         contentUrl: \"/Content/Step/1\" // optional\r\n   *     });\r\n   * @chainable\r\n   **/\n\n\n  $.fn.steps.insert = function (index, step) {\n    return insertStep(this, getOptions(this), getState(this), index, step);\n  };\n  /**\r\n   * Routes to the next step.\r\n   *\r\n   * @method next\r\n   * @return {Boolean} Indicates whether the action executed\r\n   **/\n\n\n  $.fn.steps.next = function () {\n    return goTonextStep(this, getOptions(this), getState(this));\n  };\n\n  $('a .btn-billets').click(function () {\n    // $.fn.steps.next;\n    alert('Clicou!');\n  });\n  /**\r\n   * Routes to the previous step.\r\n   *\r\n   * @method previous\r\n   * @return {Boolean} Indicates whether the action executed\r\n   **/\n\n  $.fn.steps.previous = function () {\n    return goToPreviousStep(this, getOptions(this), getState(this));\n  };\n  /**\r\n   * Removes a specific step by an given index.\r\n   *\r\n   * @method remove\r\n   * @param index {Integer} The position (zero-based) of the step to remove\r\n   * @return Indecates whether the item is removed.\r\n   **/\n\n\n  $.fn.steps.remove = function (index) {\n    return removeStep(this, getOptions(this), getState(this), index);\n  };\n  /**\r\n   * Sets a specific step object by index.\r\n   *\r\n   * @method setStep\r\n   * @param index {Integer} An integer that belongs to the position of a step\r\n   * @param step {Object} The step object to change\r\n   **/\n\n\n  $.fn.steps.setStep = function (index, step) {\n    throw new Error(\"Not yet implemented!\");\n  };\n  /**\r\n   * Skips an certain amount of steps.\r\n   *\r\n   * @method skip\r\n   * @param count {Integer} The amount of steps that should be skipped\r\n   * @return {Boolean} Indicates whether the action executed\r\n   **/\n\n\n  $.fn.steps.skip = function (count) {\n    throw new Error(\"Not yet implemented!\");\n  };\n  /**\r\n   * An enum represents the different content types of a step and their loading mechanisms.\r\n   *\r\n   * @class contentMode\r\n   * @for steps\r\n   **/\n\n\n  var contentMode = $.fn.steps.contentMode = {\n    /**\r\n     * HTML embedded content\r\n     *\r\n     * @readOnly\r\n     * @property html\r\n     * @type Integer\r\n     * @for contentMode\r\n     **/\n    html: 0,\n\n    /**\r\n     * IFrame embedded content\r\n     *\r\n     * @readOnly\r\n     * @property iframe\r\n     * @type Integer\r\n     * @for contentMode\r\n     **/\n    iframe: 1,\n\n    /**\r\n     * Async embedded content\r\n     *\r\n     * @readOnly\r\n     * @property async\r\n     * @type Integer\r\n     * @for contentMode\r\n     **/\n    async: 2\n  };\n  /**\r\n   * An enum represents the orientation of the steps navigation.\r\n   *\r\n   * @class stepsOrientation\r\n   * @for steps\r\n   **/\n\n  var stepsOrientation = $.fn.steps.stepsOrientation = {\n    /**\r\n     * Horizontal orientation\r\n     *\r\n     * @readOnly\r\n     * @property horizontal\r\n     * @type Integer\r\n     * @for stepsOrientation\r\n     **/\n    horizontal: 0,\n\n    /**\r\n     * Vertical orientation\r\n     *\r\n     * @readOnly\r\n     * @property vertical\r\n     * @type Integer\r\n     * @for stepsOrientation\r\n     **/\n    vertical: 1\n  };\n  /**\r\n   * An enum that represents the various transition animations.\r\n   *\r\n   * @class transitionEffect\r\n   * @for steps\r\n   **/\n\n  var transitionEffect = $.fn.steps.transitionEffect = {\n    /**\r\n     * No transition animation\r\n     *\r\n     * @readOnly\r\n     * @property none\r\n     * @type Integer\r\n     * @for transitionEffect\r\n     **/\n    none: 0,\n\n    /**\r\n     * Fade in transition\r\n     *\r\n     * @readOnly\r\n     * @property fade\r\n     * @type Integer\r\n     * @for transitionEffect\r\n     **/\n    fade: 1,\n\n    /**\r\n     * Slide up transition\r\n     *\r\n     * @readOnly\r\n     * @property slide\r\n     * @type Integer\r\n     * @for transitionEffect\r\n     **/\n    slide: 2,\n\n    /**\r\n     * Slide left transition\r\n     *\r\n     * @readOnly\r\n     * @property slideLeft\r\n     * @type Integer\r\n     * @for transitionEffect\r\n     **/\n    slideLeft: 3\n  };\n  var stepModel = $.fn.steps.stepModel = {\n    title: \"\",\n    content: \"\",\n    contentUrl: \"\",\n    contentMode: contentMode.html,\n    contentLoaded: false\n  };\n  /**\r\n   * An object that represents the default settings.\r\n   * There are two possibities to override the sub-properties.\r\n   * Either by doing it generally (global) or on initialization.\r\n   *\r\n   * @static\r\n   * @class defaults\r\n   * @for steps\r\n   * @example\r\n   *   // Global approach\r\n   *   $.steps.defaults.headerTag = \"h3\";\r\n   * @example\r\n   *   // Initialization approach\r\n   *   $(\"#wizard\").steps({ headerTag: \"h3\" });\r\n   **/\n\n  var defaults = $.fn.steps.defaults = {\n    /**\r\n     * The header tag is used to find the step button text within the declared wizard area.\r\n     *\r\n     * @property headerTag\r\n     * @type String\r\n     * @default \"h1\"\r\n     * @for defaults\r\n     **/\n    headerTag: \"h1\",\n\n    /**\r\n     * The body tag is used to find the step content within the declared wizard area.\r\n     *\r\n     * @property bodyTag\r\n     * @type String\r\n     * @default \"div\"\r\n     * @for defaults\r\n     **/\n    bodyTag: \"div\",\n\n    /**\r\n     * The content container tag which will be used to wrap all step contents.\r\n     *\r\n     * @property contentContainerTag\r\n     * @type String\r\n     * @default \"div\"\r\n     * @for defaults\r\n     **/\n    contentContainerTag: \"div\",\n\n    /**\r\n     * The action container tag which will be used to wrap the pagination navigation.\r\n     *\r\n     * @property actionContainerTag\r\n     * @type String\r\n     * @default \"div\"\r\n     * @for defaults\r\n     **/\n    actionContainerTag: \"div\",\n\n    /**\r\n     * The steps container tag which will be used to wrap the steps navigation.\r\n     *\r\n     * @property stepsContainerTag\r\n     * @type String\r\n     * @default \"div\"\r\n     * @for defaults\r\n     **/\n    stepsContainerTag: \"div\",\n\n    /**\r\n     * The css_old class which will be added to the outer component wrapper.\r\n     *\r\n     * @property cssClass\r\n     * @type String\r\n     * @default \"wizard\"\r\n     * @for defaults\r\n     * @example\r\n     *     <div class=\"wizard\">\r\n     *         ...\r\n     *     </div>\r\n     **/\n    cssClass: \"wizard\",\n\n    /**\r\n     * The css_old class which will be used for floating scenarios.\r\n     *\r\n     * @property clearFixCssClass\r\n     * @type String\r\n     * @default \"clearfix\"\r\n     * @for defaults\r\n     **/\n    clearFixCssClass: \"clearfix\",\n\n    /**\r\n     * Determines whether the steps are vertically or horizontally oriented.\r\n     *\r\n     * @property stepsOrientation\r\n     * @type stepsOrientation\r\n     * @default horizontal\r\n     * @for defaults\r\n     * @since 1.0.0\r\n     **/\n    stepsOrientation: stepsOrientation.horizontal,\n\n    /*\r\n     * Tempplates\r\n     */\n\n    /**\r\n     * The title template which will be used to create a step button.\r\n     *\r\n     * @property titleTemplate\r\n     * @type String\r\n     * @default \"<span class=\\\"number\\\">#index#.</span> #title#\"\r\n     * @for defaults\r\n     **/\n    titleTemplate: \"<span class=\\\"number\\\">#index#.</span> #title#\",\n\n    /**\r\n     * The loading template which will be used to create the loading animation.\r\n     *\r\n     * @property loadingTemplate\r\n     * @type String\r\n     * @default \"<span class=\\\"spinner\\\"></span> #text#\"\r\n     * @for defaults\r\n     **/\n    loadingTemplate: \"<span class=\\\"spinner\\\"></span> #text#\",\n\n    /*\r\n     * Behaviour\r\n     */\n\n    /**\r\n     * Sets the focus to the first wizard instance in order to enable the key navigation from the begining if `true`.\r\n     *\r\n     * @property autoFocus\r\n     * @type Boolean\r\n     * @default false\r\n     * @for defaults\r\n     * @since 0.9.4\r\n     **/\n    autoFocus: false,\n\n    /**\r\n     * Enables all steps from the begining if `true` (all steps are clickable).\r\n     *\r\n     * @property enableAllSteps\r\n     * @type Boolean\r\n     * @default false\r\n     * @for defaults\r\n     **/\n    enableAllSteps: false,\n\n    /**\r\n     * Enables keyboard navigation if `true` (arrow left and arrow right).\r\n     *\r\n     * @property enableKeyNavigation\r\n     * @type Boolean\r\n     * @default true\r\n     * @for defaults\r\n     **/\n    enableKeyNavigation: true,\n\n    /**\r\n     * Enables pagination if `true`.\r\n     *\r\n     * @property enablePagination\r\n     * @type Boolean\r\n     * @default true\r\n     * @for defaults\r\n     **/\n    enablePagination: true,\n\n    /**\r\n     * Suppresses pagination if a form field is focused.\r\n     *\r\n     * @property suppressPaginationOnFocus\r\n     * @type Boolean\r\n     * @default true\r\n     * @for defaults\r\n     **/\n    suppressPaginationOnFocus: true,\n\n    /**\r\n     * Enables cache for async loaded or iframe embedded content.\r\n     *\r\n     * @property enableContentCache\r\n     * @type Boolean\r\n     * @default true\r\n     * @for defaults\r\n     **/\n    enableContentCache: true,\n\n    /**\r\n     * Shows the cancel button if enabled.\r\n     *\r\n     * @property enableCancelButton\r\n     * @type Boolean\r\n     * @default false\r\n     * @for defaults\r\n     **/\n    enableCancelButton: false,\n\n    /**\r\n     * Shows the finish button if enabled.\r\n     *\r\n     * @property enableFinishButton\r\n     * @type Boolean\r\n     * @default true\r\n     * @for defaults\r\n     **/\n    enableFinishButton: true,\n\n    /**\r\n     * Not yet implemented.\r\n     *\r\n     * @property preloadContent\r\n     * @type Boolean\r\n     * @default false\r\n     * @for defaults\r\n     **/\n    preloadContent: false,\n\n    /**\r\n     * Shows the finish button always (on each step; right beside the next button) if `true`.\r\n     * Otherwise the next button will be replaced by the finish button if the last step becomes active.\r\n     *\r\n     * @property showFinishButtonAlways\r\n     * @type Boolean\r\n     * @default false\r\n     * @for defaults\r\n     **/\n    showFinishButtonAlways: false,\n\n    /**\r\n     * Prevents jumping to a previous step.\r\n     *\r\n     * @property forceMoveForward\r\n     * @type Boolean\r\n     * @default false\r\n     * @for defaults\r\n     **/\n    forceMoveForward: false,\n\n    /**\r\n     * Saves the current state (step position) to a cookie.\r\n     * By coming next time the last active step becomes activated.\r\n     *\r\n     * @property saveState\r\n     * @type Boolean\r\n     * @default false\r\n     * @for defaults\r\n     **/\n    saveState: false,\n\n    /**\r\n     * The position to start on (zero-based).\r\n     *\r\n     * @property startIndex\r\n     * @type Integer\r\n     * @default 0\r\n     * @for defaults\r\n     **/\n    startIndex: 0,\n\n    /*\r\n     * Animation Effect Configuration\r\n     */\n\n    /**\r\n     * The animation effect which will be used for step transitions.\r\n     *\r\n     * @property transitionEffect\r\n     * @type transitionEffect\r\n     * @default none\r\n     * @for defaults\r\n     **/\n    transitionEffect: transitionEffect.none,\n\n    /**\r\n     * Animation speed for step transitions (in milliseconds).\r\n     *\r\n     * @property transitionEffectSpeed\r\n     * @type Integer\r\n     * @default 200\r\n     * @for defaults\r\n     **/\n    transitionEffectSpeed: 200,\n\n    /*\r\n     * Events\r\n     */\n\n    /**\r\n     * Fires before the step changes and can be used to prevent step changing by returning `false`.\r\n     * Very useful for form validation.\r\n     *\r\n     * @property onStepChanging\r\n     * @type Event\r\n     * @default function (event, currentIndex, newIndex) { return true; }\r\n     * @for defaults\r\n     **/\n    onStepChanging: function onStepChanging(event, currentIndex, newIndex) {\n      return true;\n    },\n\n    /**\r\n     * Fires after the step has change.\r\n     *\r\n     * @property onStepChanged\r\n     * @type Event\r\n     * @default function (event, currentIndex, priorIndex) { }\r\n     * @for defaults\r\n     **/\n    onStepChanged: function onStepChanged(event, currentIndex, priorIndex) {},\n\n    /**\r\n     * Fires after cancelation.\r\n     *\r\n     * @property onCanceled\r\n     * @type Event\r\n     * @default function (event) { }\r\n     * @for defaults\r\n     **/\n    onCanceled: function onCanceled(event) {},\n\n    /**\r\n     * Fires before finishing and can be used to prevent completion by returning `false`.\r\n     * Very useful for form validation.\r\n     *\r\n     * @property onFinishing\r\n     * @type Event\r\n     * @default function (event, currentIndex) { return true; }\r\n     * @for defaults\r\n     **/\n    onFinishing: function onFinishing(event, currentIndex) {\n      return true;\n    },\n\n    /**\r\n     * Fires after completion.\r\n     *\r\n     * @property onFinished\r\n     * @type Event\r\n     * @default function (event, currentIndex) { }\r\n     * @for defaults\r\n     **/\n    onFinished: function onFinished(event, currentIndex) {},\n\n    /**\r\n     * Fires after async content is loaded.\r\n     *\r\n     * @property onContentLoaded\r\n     * @type Event\r\n     * @default function (event, index) { }\r\n     * @for defaults\r\n     **/\n    onContentLoaded: function onContentLoaded(event, currentIndex) {},\n\n    /**\r\n     * Fires when the wizard is initialized.\r\n     *\r\n     * @property onInit\r\n     * @type Event\r\n     * @default function (event) { }\r\n     * @for defaults\r\n     **/\n    onInit: function onInit(event, currentIndex) {},\n\n    /**\r\n     * Contains all labels.\r\n     *\r\n     * @property labels\r\n     * @type Object\r\n     * @for defaults\r\n     **/\n    labels: {\n      /**\r\n       * Label for the cancel button.\r\n       *\r\n       * @property cancel\r\n       * @type String\r\n       * @default \"Cancel\"\r\n       * @for defaults\r\n       **/\n      cancel: \"Cancelar\",\n\n      /**\r\n       * This label is important for accessability reasons.\r\n       * Indicates which step is activated.\r\n       *\r\n       * @property current\r\n       * @type String\r\n       * @default \"current step:\"\r\n       * @for defaults\r\n       **/\n      current: \"atual step:\",\n\n      /**\r\n       * This label is important for accessability reasons and describes the kind of navigation.\r\n       *\r\n       * @property pagination\r\n       * @type String\r\n       * @default \"Pagination\"\r\n       * @for defaults\r\n       * @since 0.9.7\r\n       **/\n      pagination: \"Paginação\",\n\n      /**\r\n       * Label for the finish button.\r\n       *\r\n       * @property finish\r\n       * @type String\r\n       * @default \"Finish\"\r\n       * @for defaults\r\n       **/\n      finish: \"Finalizar\",\n\n      /**\r\n       * Label for the next button.\r\n       *\r\n       * @property next\r\n       * @type String\r\n       * @default \"next\"\r\n       * @for defaults\r\n       **/\n      next: \"Próximo\",\n\n      /**\r\n       * Label for the previous button.\r\n       *\r\n       * @property previous\r\n       * @type String\r\n       * @default \"Previous\"\r\n       * @for defaults\r\n       **/\n      previous: \"Anterior\",\n\n      /**\r\n       * Label for the loading animation.\r\n       *\r\n       * @property loading\r\n       * @type String\r\n       * @default \"Loading ...\"\r\n       * @for defaults\r\n       **/\n      loading: \"Carregando ...\"\n    }\n  };\n  /**\r\n   * Meu botão next.\r\n   *\r\n   $('.next-step-payment').click(function ()\r\n  {\r\n      alert('Clicou');\r\n  };\r\n  **/\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/lib/jquery.steps.js\n");

/***/ }),

/***/ "./resources/views/central/css/style.css":
/*!***********************************************!*\
  !*** ./resources/views/central/css_old/style.css_old ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css_old-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdmlld3MvY2VudHJhbC9jc3Mvc3R5bGUuY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy92aWV3cy9jZW50cmFsL2Nzcy9zdHlsZS5jc3M/MWU2NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/views/central/css_old/style.css_old\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css_old-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz80NzVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ "./resources/css/normalize.css":
/*!*************************************!*\
  !*** ./resources/css_old/normalize.css_old ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css_old-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvY3NzL25vcm1hbGl6ZS5jc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Nzcy9ub3JtYWxpemUuY3NzPzQ3MDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/css_old/normalize.css_old\n");

/***/ }),

/***/ "./resources/css/main.css":
/*!********************************!*\
  !*** ./resources/css_old/main.css_old ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css_old-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvY3NzL21haW4uY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9jc3MvbWFpbi5jc3M/MjIzZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/css_old/main.css_old\n");

/***/ }),

/***/ "./resources/css/jquery.steps.css":
/*!****************************************!*\
  !*** ./resources/css_old/jquery.steps.css_old ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css_old-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvY3NzL2pxdWVyeS5zdGVwcy5jc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Nzcy9qcXVlcnkuc3RlcHMuY3NzPzg2ODgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/css_old/jquery.steps.css_old\n");

/***/ }),

/***/ "./resources/css/print.css":
/*!*********************************!*\
  !*** ./resources/css_old/print.view.css_old ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css_old-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvY3NzL3ByaW50LmNzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvY3NzL3ByaW50LmNzcz8xODYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/css_old/print.view.css_old\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0,
/******/ 			"css/print": 0,
/******/ 			"css/jquery.steps": 0,
/******/ 			"css/main": 0,
/******/ 			"css/normalize": 0,
/******/ 			"central/css/style": 0
/******/ 		};
/******/
/******/ 		// no chunk on demand loading
/******/
/******/ 		// no prefetching
/******/
/******/ 		// no preloaded
/******/
/******/ 		// no HMR
/******/
/******/ 		// no HMR manifest
/******/
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) var result = runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/
/************************************************************************/
/******/
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app","css/print","css/jquery.steps","css/main","css/normalize","central/css/style"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	__webpack_require__.O(undefined, ["css/app","css/print","css/jquery.steps","css/main","css/normalize","central/css/style"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/app","css/print","css/jquery.steps","css/main","css/normalize","central/css/style"], () => (__webpack_require__("./resources/css/normalize.css")))
/******/ 	__webpack_require__.O(undefined, ["css/app","css/print","css/jquery.steps","css/main","css/normalize","central/css/style"], () => (__webpack_require__("./resources/css/main.css")))
/******/ 	__webpack_require__.O(undefined, ["css/app","css/print","css/jquery.steps","css/main","css/normalize","central/css/style"], () => (__webpack_require__("./resources/css/jquery.steps.css")))
/******/ 	__webpack_require__.O(undefined, ["css/app","css/print","css/jquery.steps","css/main","css/normalize","central/css/style"], () => (__webpack_require__("./resources/css/print.css")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app","css/print","css/jquery.steps","css/main","css/normalize","central/css/style"], () => (__webpack_require__("./resources/views/central/css/style.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/
/******/ })()
;
