/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/lib/jquery.print.js":
/*!******************************************!*\
  !*** ./resources/js/lib/jquery.print.js ***!
  \******************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* @license \r\n * jQuery.print, version 1.6.2\r\n * Licence: CC-By (http://creativecommons.org/licenses/by/3.0/)\r\n *--------------------------------------------------------------------------*/\n(function ($) {\n  \"use strict\"; // A nice closure for our definitions\n\n  function jQueryCloneWithSelectAndTextAreaValues(elmToClone, withDataAndEvents, deepWithDataAndEvents) {\n    // Replacement jQuery clone that also clones the values in selects and textareas as jQuery doesn't for performance reasons - https://stackoverflow.com/questions/742810/clone-isnt-cloning-select-values\n    // Based on https://github.com/spencertipping/jquery.fix.clone\n    var $elmToClone = $(elmToClone),\n        $result = $elmToClone.clone(withDataAndEvents, deepWithDataAndEvents),\n        $myTextareas = $elmToClone.find('textarea').add($elmToClone.filter('textarea')),\n        $resultTextareas = $result.find('textarea').add($result.filter('textarea')),\n        $mySelects = $elmToClone.find('select').add($elmToClone.filter('select')),\n        $resultSelects = $result.find('select').add($result.filter('select')),\n        $myCanvas = $elmToClone.find('canvas').add($elmToClone.filter('canvas')),\n        $resultCanvas = $result.find('canvas').add($result.filter('canvas')),\n        i,\n        l,\n        j,\n        m,\n        myCanvasContext;\n\n    for (i = 0, l = $myTextareas.length; i < l; ++i) {\n      $($resultTextareas[i]).val($($myTextareas[i]).val());\n    }\n\n    for (i = 0, l = $mySelects.length; i < l; ++i) {\n      for (j = 0, m = $mySelects[i].options.length; j < m; ++j) {\n        if ($mySelects[i].options[j].selected === true) {\n          $resultSelects[i].options[j].selected = true;\n        }\n      }\n    }\n\n    for (i = 0, l = $myCanvas.length; i < l; ++i) {\n      // https://stackoverflow.com/a/41242597\n      myCanvasContext = $myCanvas[i].getContext('2d');\n\n      if (myCanvasContext) {\n        $resultCanvas[i].getContext('2d').drawImage($myCanvas[i], 0, 0);\n        $($resultCanvas[i]).attr(\"data-jquery-print\", myCanvasContext.canvas.toDataURL());\n      }\n    }\n\n    return $result;\n  }\n\n  function getjQueryObject(string) {\n    // Make string a vaild jQuery thing\n    var jqObj = $(\"\");\n\n    try {\n      jqObj = jQueryCloneWithSelectAndTextAreaValues(string);\n    } catch (e) {\n      jqObj = $(\"<span />\").html(string);\n    }\n\n    return jqObj;\n  }\n\n  function printFrame(frameWindow, content, options) {\n    // Print the selected window/iframe\n    var def = $.Deferred();\n\n    try {\n      frameWindow = frameWindow.contentWindow || frameWindow.contentDocument || frameWindow;\n\n      try {\n        frameWindow.resizeTo(window.innerWidth, window.innerHeight);\n      } catch (err) {\n        console.warn(err);\n      }\n\n      var wdoc = frameWindow.document || frameWindow.contentDocument || frameWindow;\n\n      if (options.doctype) {\n        wdoc.write(options.doctype);\n      }\n\n      wdoc.write(content);\n\n      try {\n        var canvas = wdoc.querySelectorAll('canvas');\n\n        for (var i = 0; i < canvas.length; i++) {\n          var ctx = canvas[i].getContext(\"2d\");\n          var image = new Image();\n\n          image.onload = function () {\n            ctx.drawImage(image, 0, 0);\n          };\n\n          image.src = canvas[i].getAttribute(\"data-jquery-print\");\n        }\n      } catch (err) {\n        console.warn(err);\n      }\n\n      wdoc.close();\n\n      var printed = false,\n          callPrint = function callPrint() {\n        if (printed) {\n          return;\n        } // Fix for IE : Allow it to render the iframe\n\n\n        frameWindow.focus();\n\n        try {\n          // Fix for IE11 - printng the whole page instead of the iframe content\n          if (!frameWindow.document.execCommand('print', false, null)) {\n            // document.execCommand returns false if it failed -http://stackoverflow.com/a/21336448/937891\n            frameWindow.print();\n          } // focus body as it is losing focus in iPad and content not getting printed\n\n\n          $('body').focus();\n        } catch (e) {\n          frameWindow.print();\n        }\n\n        frameWindow.close();\n        printed = true;\n        def.resolve();\n      }; // Print once the frame window loads - seems to work for the new-window option but unreliable for the iframe\n\n\n      $(frameWindow).on(\"load\", callPrint); // Fallback to printing directly if the frame doesn't fire the load event for whatever reason\n\n      setTimeout(callPrint, options.timeout);\n    } catch (err) {\n      def.reject(err);\n    }\n\n    return def;\n  }\n\n  function printContentInIFrame(content, options) {\n    var $iframe = $(options.iframe + \"\");\n    var iframeCount = $iframe.length;\n\n    if (iframeCount === 0) {\n      // Create a new iFrame if none is given\n      $iframe = $('<iframe height=\"0\" width=\"0\" border=\"0\" wmode=\"Opaque\"/>').prependTo('body').css_old({\n        \"position\": \"absolute\",\n        \"top\": -999,\n        \"left\": -999\n      });\n    }\n\n    var frameWindow = $iframe.get(0);\n    return printFrame(frameWindow, content, options).done(function () {\n      // Success\n      setTimeout(function () {\n        // Wait for IE\n        if (iframeCount === 0) {\n          // Destroy the iframe if created here\n          $iframe.remove();\n        }\n      }, 1000);\n    }).fail(function (err) {\n      // Use the pop-up method if iframe fails for some reason\n      console.error(\"Failed to print from iframe\", err);\n      printContentInNewWindow(content, options);\n    }).always(function () {\n      try {\n        options.deferred.resolve();\n      } catch (err) {\n        console.warn('Error notifying deferred', err);\n      }\n    });\n  }\n\n  function printContentInNewWindow(content, options) {\n    // Open a new window and print selected content\n    var frameWindow = window.open();\n    return printFrame(frameWindow, content, options).always(function () {\n      try {\n        options.deferred.resolve();\n      } catch (err) {\n        console.warn('Error notifying deferred', err);\n      }\n    });\n  }\n\n  function isNode(o) {\n    /* http://stackoverflow.com/a/384380/937891 */\n    return !!((typeof Node === \"undefined\" ? \"undefined\" : _typeof(Node)) === \"object\" ? o instanceof Node : o && _typeof(o) === \"object\" && typeof o.nodeType === \"number\" && typeof o.nodeName === \"string\");\n  }\n\n  $.print = $.fn.print = function () {\n    // Print a given set of elements\n    var options,\n        $this,\n        self = this; // console.log(\"Printing\", this, arguments);\n\n    if (self instanceof $) {\n      // Get the node if it is a jQuery object\n      self = self.get(0);\n    }\n\n    if (isNode(self)) {\n      // If `this` is a HTML element, i.e. for\n      // $(selector).print()\n      $this = $(self);\n\n      if (arguments.length > 0) {\n        options = arguments[0];\n      }\n    } else {\n      if (arguments.length > 0) {\n        // $.print(selector,options)\n        $this = $(arguments[0]);\n\n        if (isNode($this[0])) {\n          if (arguments.length > 1) {\n            options = arguments[1];\n          }\n        } else {\n          // $.print(options)\n          options = arguments[0];\n          $this = $(\"html\");\n        }\n      } else {\n        // $.print()\n        $this = $(\"html\");\n      }\n    } // Default options\n\n\n    var defaults = {\n      globalStyles: true,\n      mediaPrint: false,\n      stylesheet: null,\n      noPrintSelector: \".no-print\",\n      iframe: true,\n      append: null,\n      prepend: null,\n      manuallyCopyFormValues: true,\n      deferred: $.Deferred(),\n      timeout: 750,\n      title: null,\n      doctype: '<!doctype html>'\n    }; // Merge with user-options\n\n    options = $.extend({}, defaults, options || {});\n    var $styles = $(\"\");\n\n    if (options.globalStyles) {\n      // Apply the stlyes from the current sheet to the printed page\n      $styles = $(\"style, link, meta, base, title\");\n    } else if (options.mediaPrint) {\n      // Apply the media-print stylesheet\n      $styles = $(\"link[media=print]\");\n    }\n\n    if (options.stylesheet) {\n      // Add a custom stylesheet(s) if given\n      if (!($.isArray ? $.isArray : Array.isArray)(options.stylesheet)) {\n        options.stylesheet = [options.stylesheet];\n      }\n\n      for (var i = 0; i < options.stylesheet.length; i++) {\n        $styles = $.merge($styles, $('<link rel=\"stylesheet\" href=\"' + options.stylesheet[i] + '\">'));\n      }\n    } // Create a copy of the element to print\n\n\n    var copy = jQueryCloneWithSelectAndTextAreaValues($this, true, true); // Wrap it in a span to get the HTML markup string\n\n    copy = $(\"<span/>\").append(copy); // Remove unwanted elements\n\n    copy.find(options.noPrintSelector).remove(); // Add in the styles\n\n    copy.append(jQueryCloneWithSelectAndTextAreaValues($styles)); // Update title\n\n    if (options.title) {\n      var title = $(\"title\", copy);\n\n      if (title.length === 0) {\n        title = $(\"<title />\");\n        copy.append(title);\n      }\n\n      title.text(options.title);\n    } // Appedned content\n\n\n    copy.append(getjQueryObject(options.append)); // Prepended content\n\n    copy.prepend(getjQueryObject(options.prepend));\n\n    if (options.manuallyCopyFormValues) {\n      // Manually copy form values into the HTML for printing user-modified input fields\n      // http://stackoverflow.com/a/26707753\n      copy.find(\"input\").each(function () {\n        var $field = $(this);\n\n        if ($field.is(\"[type='radio']\") || $field.is(\"[type='checkbox']\")) {\n          if ($field.prop(\"checked\")) {\n            $field.attr(\"checked\", \"checked\");\n          }\n        } else {\n          $field.attr(\"value\", $field.val());\n        }\n      });\n      copy.find(\"select\").each(function () {\n        var $field = $(this);\n        $field.find(\":selected\").attr(\"selected\", \"selected\");\n      });\n      copy.find(\"textarea\").each(function () {\n        // Fix for https://github.com/DoersGuild/jQuery.print/issues/18#issuecomment-96451589\n        var $field = $(this);\n        $field.text($field.val());\n      });\n    } // Get the HTML markup string\n\n\n    var content = copy.html(); // Notify with generated markup & cloned elements - useful for logging, etc\n\n    try {\n      options.deferred.notify('generated_markup', content, copy);\n    } catch (err) {\n      console.warn('Error notifying deferred', err);\n    } // Destroy the copy\n\n\n    copy.remove();\n\n    if (options.iframe) {\n      // Use an iframe for printing\n      try {\n        printContentInIFrame(content, options);\n      } catch (e) {\n        // Use the pop-up method if iframe fails for some reason\n        console.error(\"Failed to print from iframe\", e.stack, e.message);\n        printContentInNewWindow(content, options);\n      }\n    } else {\n      // Use a new window for printing\n      printContentInNewWindow(content, options);\n    }\n\n    return this;\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/lib/jquery.print.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/lib/jquery.print.js"]();
/******/
/******/ })()
;
